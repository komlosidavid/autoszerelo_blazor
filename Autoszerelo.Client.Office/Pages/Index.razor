@page "/"
@inject WorkService service
@inject NavigationManager navigation

<PageTitle>Home | Works</PageTitle>

<h1 class="mb-3">All works:</h1>

<div class="w-100 mb-3 d-flex align-items-center justify-content-start">
    <button class="btn btn-primary" @onclick="async () => await RefreshData()">Refresh</button>
    <form class="w-100 ms-2">
        <div class="form-group w-100">
            <input class="form-control @border" type="search" placeholder="Search..." @oninput="Search" />
        </div>
    </form>
</div>

@if (searchResults != null)
{ 
    @if (!searchResults.Any())
    {
        <div class="w-100 p-2" style="min-height: 300px; z-index: 99; position:fixed; background: #fff">
            No results...
        </div>
    }
    else
    {        
        <div class="w-100 p-2" style="min-height: 300px; z-index: 99; position:fixed; background: #fff">
           <table class="table">
            <thead>
                <tr>
                    <th>Client Name</th>
                    <th>Car Type</th>
                    <th>Car Licence</th>
                    <th>Work Hours</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var work in searchResults)
                {
                    <tr>
                        <td>@work.Client.Name</td>
                        <td>@work.Car.Type</td>
                        <td>@work.Car.Licence</td>
                        <td>@work.WorkHours</td>
                        <td>@work.Status</td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    }
}

@if (data == null)
{
    <h3>Loading...</h3>
}
else {
    if (data.Count() == 0)
    {
        <h3>There are no works.</h3>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th @onclick="() => SortBy(nameof(Work.Client.Name))">Client Name</th>
                    <th @onclick="() => SortBy(nameof(Work.Car.Type))">Car Type</th>
                    <th @onclick="() => SortBy(nameof(Work.Car.Licence))">Car Licence</th>
                    <th @onclick="() => SortBy(nameof(Work.WorkHours))">Work Hours</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var work in data)
                {
                    <tr>
                        <td>@work.Client.Name</td>
                        <td>@work.Car.Type</td>
                        <td>@work.Car.Licence</td>
                        <td>@work.WorkHours</td>
                        <td>@work.Status</td>
                        <td><button class="btn btn-secondary" @onclick="() => SelectWork(work.Id)">Select</button></td>
                        <td><button class="btn btn-danger" @onclick="async () => await DeleteWork(work.Id)">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    private IEnumerable<Work>? data;
    private IEnumerable<Work>? searchResults;
    private string border = "";

    protected override async Task OnInitializedAsync()
    {
        data = await service.GetAllWorks();
    }
}

@functions {
    private bool isAscending = true;

    private async Task RefreshData()
    {
        data = await service.GetAllWorks();
        searchResults = null;
    }

    private void SelectWork(Guid id)
    {
       navigation.NavigateTo($"/work/{id}");
    }

    private async Task DeleteWork(Guid id)
    {
        await service.DeleteWork(id);
        await RefreshData();
    }

    private bool ValidateInput(string input)
    {
        string forbiddenCharacters = "Ä€÷×äđĐ[]łŁ$ß¤<>#&@{},.-~ˇ^˘!%/=()`˙´˝";
        for (var i = 0; i < input.Length; i++)
        {
            for (var j = 0; j < forbiddenCharacters.Length; j++)
            {
                if (input[i] == forbiddenCharacters[j])
                {
                    searchResults = new List<Work>();
                    border = "is-invalid";
                    return false;
                }
            }
        }
        border = "";
        return true;
    }

    private async Task Search(ChangeEventArgs e)
    {
        var param = e.Value.ToString();
        if (ValidateInput(param))
        {
            searchResults = await service.SearchForWorks(param);
        }
        else
        {
            Console.WriteLine("Not valid");
        }

    }

    private void SortBy(string columnName)
    {
        if (isAscending && columnName == nameof(Work.Client.Name))
        {
            data?.OrderBy(w => w.Client.Name);
            isAscending = !isAscending;
        }
        if (!isAscending && columnName == nameof(Work.Client.Name))
        {
            data?.OrderByDescending(w => w.Client.Name);
            isAscending = !isAscending;
        }

        if (isAscending && columnName == nameof(Work.Car.Type))
        {
            data?.OrderBy(w => w.Car.Type);
            isAscending = !isAscending;
        }
        if (!isAscending && columnName == nameof(Work.Car.Type))
        {
            data?.OrderByDescending(w => w.Car.Type);
            isAscending = !isAscending;
        }

        if (isAscending && columnName == nameof(Work.Car.Licence))
        {
            data?.OrderBy(w => w.Car.Licence);
            isAscending = !isAscending;
        }
        if (!isAscending && columnName == nameof(Work.Car.Licence))
        {
            data?.OrderByDescending(w => w.Car.Licence);
            isAscending = !isAscending;
        }

        if (isAscending && columnName == nameof(Work.WorkHours))
        {
            data?.OrderBy(w => w.WorkHours);
            isAscending = !isAscending;
        }
        if (!isAscending && columnName == nameof(Work.WorkHours))
        {
            data?.OrderByDescending(w => w.WorkHours);
            isAscending = !isAscending;
        }

        StateHasChanged();
    }
}